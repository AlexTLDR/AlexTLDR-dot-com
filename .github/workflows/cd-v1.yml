name: cd-v1

on:
    push:
        branches: [v1]

env:
    REGISTRY: ghcr.io
    IMAGE_NAME: alextldr/alextldr-dot-com

jobs:
    build-and-deploy-v1:
        name: Build and Deploy v1
        runs-on: ubuntu-latest
        permissions:
            contents: read
            packages: write

        steps:
            - name: Check out code
              uses: actions/checkout@v4

            - name: Log in to Container Registry
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Extract metadata
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
                  tags: |
                      type=raw,value=v1

            - name: Build and push v1 Docker image
              uses: docker/build-push-action@v5
              with:
                  context: .
                  push: true
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}

            - name: Deploy v1 to Hetzner VM
              uses: appleboy/ssh-action@v1.0.3
              with:
                  host: 188.245.181.254
                  username: alex
                  key: ${{ secrets.SSH_PRIVATE_KEY }}
                  script: |
                      # Login to GitHub Container Registry
                      echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

                      # Check if v1 container exists and get its current image
                      CURRENT_IMAGE=""
                      if docker inspect alextldr-v1 >/dev/null 2>&1; then
                          CURRENT_IMAGE=$(docker inspect alextldr-v1 --format='{{.Config.Image}}')
                          echo "Current v1 image: $CURRENT_IMAGE"
                      else
                          echo "No existing v1 container found"
                      fi

                      # Pull the latest v1 image
                      docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v1

                      # Get the new image digest
                      NEW_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v1"
                      NEW_DIGEST=$(docker inspect $NEW_IMAGE --format='{{index .RepoDigests 0}}' 2>/dev/null || echo "")
                      CURRENT_DIGEST=$(docker inspect $CURRENT_IMAGE --format='{{index .RepoDigests 0}}' 2>/dev/null || echo "")

                      # Check if deployment is needed
                      DEPLOY_NEEDED=false
                      if [ -z "$CURRENT_IMAGE" ]; then
                          echo "First v1 deployment, will deploy"
                          DEPLOY_NEEDED=true
                      elif [ "$NEW_DIGEST" != "$CURRENT_DIGEST" ]; then
                          echo "v1 image has changed, will redeploy"
                          DEPLOY_NEEDED=true
                      else
                          echo "v1 image unchanged, skipping deployment"
                      fi

                      # Deploy only if needed
                      if [ "$DEPLOY_NEEDED" = true ]; then
                          echo "Deploying v1 container..."

                          # Stop and remove existing v1 container
                          docker stop alextldr-v1 || true
                          docker rm alextldr-v1 || true

                          # Run the new v1 container
                          docker run -d \
                              --name alextldr-v1 \
                              --restart unless-stopped \
                              -p 1001:8080 \
                              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v1

                          echo "v1 container deployed successfully"
                      else
                          echo "v1 deployment skipped - no changes detected"
                      fi

                      # Clean up old images
                      docker image prune -f
